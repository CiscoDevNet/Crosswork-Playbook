---
# Playbook to perform a reload SMU upgrade on a router
# Nitish Vashishtha (nvashish@cisco.com)
# 11/04/2016

#
#@header_start
# "mop_version": "1.0.0"
# "name": "Install an optional package or a SMU"
# "description": "Install an optional package or a SMU on a router."
# "pb_params_sample_file_name": "router_op_smu_upgrade_params.json"
# "pb_params_spec_file_name": "router_op_smu_upgrade_specs.json"
# "prerequisites": "<ol><li>To install packages on the router, access to CSM repository is required. To access the CSM repository either use the default credential profile 'Default CSM package repository' or create a new one and update the required credentials. These credentials are used to copy the packages to the router for installation.</li><li>The list of active and committed packages on the router should be same.</li></ol>"
# "long_description":"This playbook is used to install an optional package(s) or images or SMUs on a router. <br />The process involves verifying the existing ‘active’ and ‘committed’ packages are same, installing  the given package on router, costing out all interfaces of an IGP, verifying the 'cost-out' operation, activating  the package on router, committing the package on the router, verifying the ‘install’ operation is successful, costing in the traffic of all interfaces of the IGP, verifying the ‘cost in’ operation and ending with verification of node redundancy.<br />The 'cost-out' is the operation to drain out the traffic and the 'cost-in' is vice-versa."
# "sw_platform": "IOS XR"
# "min_nodes": 1
# "max_nodes": 1
#@header_end

#########################################################
# Continuous pre-checks
#########################################################

- name: Perform continuous checks on the router(s)
  hosts: localhost
  connection: local
  gather_facts: no
  tags: ["continuous"]
  vars:
    - router_ip: "{{ inventory_hostname }}"
    - router_name: "{{ hosts }}"
    - check_mode: no
    - check: "cost_op_cont"

  roles:
    - { role: router_check }


#########################################################
# Pre-Maintenance
#########################################################

# check tasks (check in verb name) tagged with just 'pre_maintenance'
# will be run asynchronously(parallely) with alerting service if the source is 'astack'

- name: Perform pre-check on the router(s)
  hosts: localhost
  connection: local
  gather_facts: no
  vars:
    - router_ip: "{{ inventory_hostname }}"
    - router_name: "{{ hosts }}"
    - check_mode: no
    - check: "redundancy"
  roles:
    - { role: router_check, tags: ["pre_maintenance"] }

- name: Perform pre-check on the router(s)
  hosts: localhost
  connection: local
  gather_facts: no
  vars:
    - router_ip: "{{ inventory_hostname }}"
    - router_name: "{{ hosts }}"
    - check_mode: no
    - check: "interface"
  roles:
    - { role: router_check, tags: ["pre_maintenance"] }

#########################################################
# Maintenance
#########################################################

- name: Perform check on the router(s)
  hosts: "{{ hosts }}"
  connection: local
  gather_facts: no
  any_errors_fatal: true
  vars:
    - router_ip: "{{ inventory_hostname }}"
    - router_name: "{{ hosts }}"
    - check_mode: no
  roles:
    - { role: router_check_install_consistency, tags: ["maintenance"] }

- name: Perform Lock on the devices
  hosts: localhost
  any_errors_fatal: true
  connection: local
  gather_facts: no
  vars:
    - router_ip: "{{ inventory_hostname }}"
    - router_name: "{{ hosts }}"
    - check_mode: no

  roles:
    - { role: router_op_dlm_node_lock, tags: ["maintenance"] }

- name: Get RFC-3339 system timestamp
  hosts: "{{ hosts }}"
  connection: local
  gather_facts: no
  tags:
    - "maintenance"
  tasks:
    - name: Get time of starting collection
      shell: date +%FT%T.%5NZ
      register: collection_start_time

- name: Pause
  hosts: "{{ hosts }}"
  connection: local
  gather_facts: no
  vars:
    - router_ip: "{{ inventory_hostname }}"
    - router_name: "{{ hosts }}"
    - pause_time: 60
    - pause_reason: "continuous checks to collect data points"

  roles:
    - {role: op_pause, tags: ["maintenance"]}

- name: Install 'Add' a package on the specified router(s)
  hosts: "{{ hosts }}"
  connection: local
  gather_facts: no
  vars:
    - action: Add
    - repository: "{{ repository }}"
    - optimize: "{{ optimize }}"
    - router_ip: "{{ inventory_hostname }}"

  roles:
    - { role: router_op_install, tags: ["maintenance"] }


- name: Cost out all the interfaces on a router
  hosts: "{{ hosts }}"
  connection: local
  gather_facts: no
  vars:
    - cost_op: out
    - cost_protocol: "{{ cost_protocol }}"
    - method: "{{ cost_method }}"
    - provider: "{{ provider }}"
    - router_ip: "{{ inventory_hostname }}"
    - vrf: "{{ cost_vrf }}"
    - proc_id: "{{ cost_proc_id }}"

  roles:
    - { role: router_op_cost_in_out, tags: ["maintenance"] }

- name: Get RFC-3339 system timestamp
  hosts: "{{ hosts }}"
  connection: local
  gather_facts: no
  tags:
    - "maintenance"
  tasks:
    - name: Get time of cost out
      shell: date +%FT%T.%5NZ
      register: cost_out_time

- name: Pause
  hosts: "{{ hosts }}"
  connection: local
  gather_facts: no
  vars:
    - router_ip: "{{ inventory_hostname }}"
    - router_name: "{{ hosts }}"
    - pause_time: 120
    - pause_reason: "traffic to drain out"

  roles:
    - {role: op_pause, tags: ["maintenance"]}

- name: Get RFC-3339 system timestamp
  hosts: "{{ hosts }}"
  connection: local
  gather_facts: no
  tags:
    - "maintenance"
  tasks:
    - name: Get time before verifying cost out
      shell: date +%FT%T.%5NZ
      register: cost_out_check_start_time

- name: Verify Cost 'Out' operation on the specified router(s)
  hosts:  "{{ hosts }}"
  connection: local
  gather_facts: no
  vars:
    - router_ip: "{{ inventory_hostname }}"
    - router_name: "{{ hosts }}"
    - threshold_percentage: "{{ cost_threshold_percent }}"
    - interfaces: "{{ cost_op_result['affected_interfaces'] if cost_op_result is defined else [] }}"
    - query_period: "{{ (( cost_out_time.stdout|to_datetime('%Y-%m-%dT%H:%M:%S.%fZ') - collection_start_time.stdout|to_datetime('%Y-%m-%dT%H:%M:%S.%fZ') ).total_seconds()/ 60 ) | round(0,'ceil') | int | string | regex_replace('^(.+)$','\\1m') if cost_out_check_start_time is defined and collection_start_time is defined else '' }}"
    - offset_time: "{{ (( cost_out_check_start_time.stdout|to_datetime('%Y-%m-%dT%H:%M:%S.%fZ') - collection_start_time.stdout|to_datetime('%Y-%m-%dT%H:%M:%S.%fZ') ).total_seconds()/ 60 ) | round(0,'ceil') | int | string | regex_replace('^(.+)$','\\1m') if cost_out_check_start_time is defined and cost_out_time is defined else '' }}"
    - source: "astack"

  roles:
    - {role: router_check_cost_out, tags: ["maintenance"]}

- name: Install 'Activate' a package on the specified router(s)
  hosts:  "{{ hosts }}"
  connection: local
  gather_facts: no
  vars:
    - action: Activate
    - optimize: "{{ optimize }}"
    - router_ip: "{{ inventory_hostname }}"

  roles:
    - { role: router_op_install, tags: ["maintenance"] }


- name: Install 'Commit' a package on the specified router(s)
  hosts:  "{{ hosts }}"
  connection: local
  gather_facts: no
  vars:
    - action: Commit
    - router_ip: "{{ inventory_hostname }}"
    - packages: "{{ package_change_list | default([]) }}"

  roles:
    - {role: router_op_install, tags: ["maintenance"] }

#########################################################
# Post-Maintenance
#########################################################

- name: Verify install operation on the specified router(s)
  hosts:  "{{ hosts }}"
  connection: local
  gather_facts: no
  vars:
    - router_ip: "{{ inventory_hostname }}"
    - router_name: "{{ hosts }}"
    - pkgs: "{{ package_change_list | default([]) }}"

  roles:
    - { role: router_check_install_verify, tags: ["post_maintenance"] }

- name: Cost 'in' operation on the specified router(s)
  hosts:  "{{ hosts }}"
  connection: local
  gather_facts: no
  vars:
    - cost_op: in
    - cost_protocol: "{{ cost_protocol }}"
    - method: "{{ cost_method }}"
    - provider: "{{ provider }}"
    - router_ip: "{{ inventory_hostname }}"
    - vrf: "{{ cost_vrf }}"
    - proc_id: "{{ cost_proc_id }}"
    - costout_result: "{{ cost_op_result if cost_op_result is defined else {}}}"

  roles:
    - { role: router_op_cost_in_out, tags: ["post_maintenance"] }

- name: Verify Node Redundancy on the specified router(s)
  hosts:  "{{ hosts }}"
  connection: local
  gather_facts: no
  vars:
    - router_ip: "{{ inventory_hostname }}"
    - router_name: "{{ hosts }}"
    - unique_id: "as a post-check"
    - check: "redundancy"

  roles:
    - { role: router_check, tags: ["post_maintenance"] }
...
