---
# Ansible playbook to cost in/out an interface under IGP

#@header_start
# "mop_version": "1.0.0"
# "name": "IGP Interface Cost in out"
# "description": "Cost Out one or more interfaces part of ISIS/OSPF/OSPFv3 IGP followed by a Cost In."
# "pb_params_sample_file_name": "router_op_cost_in_out_interface_params.json"
# "pb_params_spec_file_name": "router_op_cost_in_out_interface_specs.json"
# "prerequisites": "The interfaces to be 'cost-out' and 'cost-in' should be configured for the specific IGP"
# "long_description": "This playbook is used to perform ‘cost-out’ operation followed by a ‘cost-in’ operation on one or more interfaces of a router. The 'cost-out' is the operation to drain out the traffic and the 'cost-in' is vice-versa. The supported IGPs are ISIS, OSPF and OSPFv3. A ‘pause’ of 2 mins is added between the cost operations and a verification is also performed."
# "sw_platform": "IOS XR"
# "min_nodes": 1
# "max_nodes": 1
#@header_end

#########################################################
# Continuous pre-checks
#########################################################

- name: Perform continuous checks on the router(s)
  hosts: localhost
  connection: local
  gather_facts: no
  tags: ["continuous"]
  vars:
    - router_ip: "{{ inventory_hostname }}"
    - router_name: "{{ hosts }}"
    - check_mode: no
    - unique_id: "as a continuous check"
    - check: "cost_op_cont"

  roles:
    - { role: router_check }

#########################################################
# Maintenance
#########################################################
- name: Perform Lock on the devices
  hosts: localhost
  any_errors_fatal: true
  connection: local
  gather_facts: no
  vars:
    - router_ip: "{{ inventory_hostname }}"
    - router_name: "{{ hosts }}"
    - check_mode: "{{ check_mode }}"

  roles:
    - { role: router_op_dlm_node_lock, tags: ["maintenance"] }

- name: Get RFC-3339 system timestamp
  hosts: "{{ hosts }}"
  connection: local
  gather_facts: no
  tags:
    - "maintenance"
  tasks:
    - name: Get time of starting collection
      shell: date +%FT%T.%5NZ
      register: collection_start_time

- name: Pause
  hosts: "{{ hosts }}"
  connection: local
  gather_facts: no
  vars:
    - router_ip: "{{ inventory_hostname }}"
    - router_name: "{{ hosts }}"
    - collection_type: "{{ collection_type }}"    
    - pause_time: "{{ 120 if collection_type == 'snmp' else 60 }}"
    - pause_reason: "continuous checks to collect data points"
    - check_mode: "{{ check_mode }}"

  roles:
    - {role: op_pause, tags: ["maintenance"]}

- name: Cost-out operation on the specified interface
  hosts:  "{{ hosts }}"
  connection: local
  gather_facts: no
  vars:
    - router_ip: "{{ inventory_hostname }}"
    - cost_op: out
    - unique_id: ""
    - cost_protocol: "{{ cost_protocol }}"
    - check_mode: "{{ check_mode }}"

  roles:
    - {role: router_op_cost_in_out_interface, tags: ["maintenance"]}

- name: Get RFC-3339 system timestamp
  hosts: "{{ hosts }}"
  connection: local
  gather_facts: no
  tags:
    - "maintenance"
  tasks:
    - name: Get time of cost out
      shell: date +%FT%T.%5NZ
      register: cost_out_time

- name: Pause
  hosts: "{{ hosts }}"
  connection: local
  gather_facts: no
  vars:
    - router_ip: "{{ inventory_hostname }}"
    - router_name: "{{ hosts }}"
    - pause_time: 120
    - pause_reason: "traffic to drain out"
    - check_mode: "{{ check_mode }}"

  roles:
    - {role: op_pause, tags: ["maintenance"]}

- name: Get RFC-3339 system timestamp
  hosts: "{{ hosts }}"
  connection: local
  gather_facts: no
  tags:
    - "maintenance"
  tasks:
    - name: Get time before verifying cost out
      shell: date +%FT%T.%5NZ
      register: cost_out_check_start_time

- name: Verify cost-out operation on the specified router(s)
  hosts:  "{{ hosts }}"
  connection: local
  gather_facts: no
  vars:
    - router_ip: "{{ inventory_hostname }}"
    - router_name: "{{ hosts }}"
    - check_mode: "{{ check_mode }}"
    - threshold_percentage: "{{ cost_threshold_percent }}"
    - interfaces: "{{ if_names }}"
    - query_period: "{{ (( cost_out_time.stdout|to_datetime('%Y-%m-%dT%H:%M:%S.%fZ') - collection_start_time.stdout|to_datetime('%Y-%m-%dT%H:%M:%S.%fZ') ).total_seconds()/ 60 ) | round(0,'ceil') | int | string | regex_replace('^(.+)$','\\1m') if cost_out_check_start_time is defined and collection_start_time is defined else '' }}"
    - offset_time: "{{ (( cost_out_check_start_time.stdout|to_datetime('%Y-%m-%dT%H:%M:%S.%fZ') - collection_start_time.stdout|to_datetime('%Y-%m-%dT%H:%M:%S.%fZ') ).total_seconds()/ 60 ) | round(0,'ceil') | int | string | regex_replace('^(.+)$','\\1m') if cost_out_check_start_time is defined and cost_out_time is defined else '' }}"
    - source: "astack"

  roles:
    - {role: router_check_cost_out, tags: ["maintenance"]}

- name: Cost-in operation on the specified interface
  hosts:  "{{ hosts }}"
  connection: local
  gather_facts: no
  vars:
    - router_ip: "{{ inventory_hostname }}"
    - cost_op: in
    - cost_protocol: "{{ cost_protocol }}"
    - unique_id: ""
    - check_mode: "{{ check_mode }}"
    - cost_out_result: "{{ cost_op_result if cost_op_result is defined else {} }}"

  roles:
    - {role: router_op_cost_in_out_interface, tags: ["maintenance"]}

...
