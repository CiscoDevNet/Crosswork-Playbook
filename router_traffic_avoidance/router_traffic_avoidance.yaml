# Computing path with SR avoidance constraints

#@header_start
# "mop_version": "1.0.0"
# "name": "Computing path with SR avoidance constraints"
# "description": "This playbook computes a path from source to destination with SR avoidance constraints using WAE."
# "pb_params_sample_file_name": "router_traffic_avoidance_params.json"
# "pb_params_spec_file_name": "router_traffic_avoidance_specs.json"
# "prerequisites": "<ol><li>The (WAN Automation Engine) WAE provider should be added to Crosswork </li><li> The WAE should be configured as a provider in Crosswork. The ‘WAE provider’ should be added as ‘compute config provider’ for the devices. </li><li> For execution of the playbook the ‘wae_network_name’ is mandatory.</li></ol>"
# "long_description": "This playbook computes the optimised path from source to destination using WAE (WAN Automation Engine) when  the congested node(s) and interface(s) is/are provided as input"
# "sw_platform": "IOS XR"
# "min_nodes": 2
# "max_nodes": 2
#@header_end

- name: Lock the devices in Crosswork
  hosts: localhost
  any_errors_fatal: true
  connection: local
  gather_facts: no
  vars:
    - router_ip: "{{ inventory_hostname }}"
    - router_name: "{{ hosts }}"
    - check_mode: no

  roles:
    - { role: router_op_dlm_node_lock, tags: ["maintenance"] }

- name: Interface with WAE retrieval of path info from path-compute-avoidance
  hosts: localhost
  connection: local
  gather_facts: no
  vars:
    - check_mode: "{{ check_mode }}"
    - wae_network_name: "{{ wae_network_name }}"
    - wae_provider_name: "{{ wae_provider_name }}"
    - source_node: "{{ hosts.split(',')[0] }}"
    - destination_node: "{{ hosts.split(',')[1] }}"
    - metric: "{{ metric }}"
    - constraint_avoidance: "{{ constraint_avoidance }}"
    - constraint_latency: "{{ constraint_latency }}"

  roles:
    - { role: wae_path_compute_avoidance, tags: ["maintenance"] }
